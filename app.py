# -*- coding: utf-8 -*-
"""
Vƒõdomostn√≠ kv√≠z ‚Äì Streamlit (CZ)
---------------------------------
Funkce:
- T√©mata: P≈ô√≠roda, Historie, Zemƒõpis, Kultura, Sport, V≈°eobecn√©
- Obt√≠≈ænost: Lehk√°, St≈ôedn√≠, Tƒõ≈æk√°
- Poƒçet ot√°zek: 10‚Äì100
- Limit na ot√°zku: 5‚Äì30 s (po vypr≈°en√≠ se ot√°zka vyhodnot√≠ jako neodpovƒõzen√°)
- Mo≈ænosti A‚ÄìD (shuffle), jedna spr√°vn√°
- Sk√≥re + p≈ôehled + vysvƒõtlen√≠ + export do CSV
- Import vlastn√≠ JSON banky ot√°zek
- Generov√°n√≠ ot√°zek: Lok√°ln√≠ (bez AI) + volitelnƒõ AI (OpenAI / Ollama)

Pozn.: Na Streamlit Cloud doporuƒçuji m√≠t v repu soubor requirements.txt:
    streamlit>=1.33
    pandas>=2.0
"""
from __future__ import annotations
import json
import os
import random
import time
from dataclasses import dataclass
from typing import List, Dict, Any

import pandas as pd
import streamlit as st

# =============== Datov√© typy ===============
@dataclass
class QA:
    question: str
    options: List[str]
    correct_index: int
    explanation: str
    category: str
    difficulty: str

# =============== Vestavƒõn√° miniaturn√≠ banka (uk√°zkov√°) ===============
BUILTIN_BANK: List[QA] = [
    # P≈ô√≠roda
    QA("Kter√Ω plyn tvo≈ô√≠ nejvƒõt≈°√≠ ƒç√°st zemsk√© atmosf√©ry?", ["Kysl√≠k", "Dus√≠k", "Oxid uhliƒçit√Ω", "Argon"], 1, "P≈ôibli≈ænƒõ 78 % je dus√≠k.", "P≈ô√≠roda", "Lehk√°"),
    QA("Kter√° ƒç√°st rostliny zaji≈°≈•uje fotosynt√©zu nejv√≠ce?", ["Ko≈ôen", "Kvƒõt", "Stonek", "List"], 3, "Fotosynt√©za prob√≠h√° hlavnƒõ v listech.", "P≈ô√≠roda", "Lehk√°"),
    QA("Jak se naz√Ωv√° vƒõda o t≈ô√≠dƒõn√≠ organism≈Ø?", ["Ekologie", "Genetika", "Taxonomie", "Etologie"], 2, "Taxonomie se zab√Ωv√° klasifikac√≠.", "P≈ô√≠roda", "St≈ôedn√≠"),
    QA("Kter√Ω prvek m√° chemickou znaƒçku Fe?", ["Mƒõƒè", "≈Ωelezo", "Fluor", "St≈ô√≠bro"], 1, "Fe je ferrum = ≈æelezo.", "P≈ô√≠roda", "Lehk√°"),
    # Historie
    QA("V kter√©m roce do≈°lo na na≈°em √∫zem√≠ k sametov√© revoluci?", ["1968", "1989", "1993", "2004"], 1, "Sametov√° revoluce probƒõhla v roce 1989.", "Historie", "Lehk√°"),
    QA("Kdo byl prvn√≠m prezidentem ƒåeskoslovenska?", ["Tom√°≈° G. Masaryk", "Edvard Bene≈°", "Klement Gottwald", "Ludv√≠k Svoboda"], 0, "Prvn√≠m prezidentem byl T. G. Masaryk.", "Historie", "Lehk√°"),
    QA("Jak se jmenovala obchodn√≠ cesta spojuj√≠c√≠ ƒå√≠nu a Evropu?", ["Jantarov√° stezka", "Hedv√°bn√° stezka", "Kr√°lovsk√° cesta", "Cesta ko≈ôen√≠"], 1, "Hedv√°bn√° stezka.", "Historie", "St≈ôedn√≠"),
    # Zemƒõpis
    QA("Kter√° ≈ôeka je nejdel≈°√≠ v Evropƒõ?", ["Dunaj", "Volha", "R√Ωn", "Dnƒõpr"], 1, "Volha je nejdel≈°√≠ evropsk√° ≈ôeka.", "Zemƒõpis", "St≈ôedn√≠"),
    QA("Jak√© je hlavn√≠ mƒõsto Polska?", ["Var≈°ava", "Krakov", "Gda≈àsk", "Pozna≈à"], 0, "Hlavn√≠m mƒõstem Polska je Var≈°ava.", "Zemƒõpis", "Lehk√°"),
    QA("Nejvy≈°≈°√≠ hora ƒåR je‚Ä¶", ["Snƒõ≈æn√≠k", "Pradƒõd", "Snƒõ≈æka", "Lys√° hora"], 2, "Snƒõ≈æka (1603 m).", "Zemƒõpis", "Lehk√°"),
    # Kultura
    QA("Kdo slo≈æil symfonii ‚ÄöNovosvƒõtsk√°‚Äò?", ["Ludwig van Beethoven", "Anton√≠n Dvo≈ô√°k", "Bed≈ôich Smetana", "Franz Schubert"], 1, "Dvo≈ô√°kova 9. symfonie.", "Kultura", "St≈ôedn√≠"),
    QA("Jak se naz√Ωv√° obrazov√° technika s malbou do vlhk√© om√≠tky?", ["Freska", "Akryl", "Tempera", "Pastel"], 0, "Freska se maluje do ƒçerstv√© om√≠tky.", "Kultura", "St≈ôedn√≠"),
    # Sport
    QA("Kolik hr√°ƒç≈Ø m√° t√Ωm na h≈ôi≈°ti v ledn√≠m hokeji (vƒçetnƒõ brank√°≈ôe)?", ["5", "6", "7", "8"], 1, "Obvykle 6 hr√°ƒç≈Ø: 5+brank√°≈ô.", "Sport", "Lehk√°"),
    QA("Kter√Ω turnaj je souƒç√°st√≠ tenisov√©ho Grand Slamu?", ["Indian Wells", "Cincinnati", "Wimbledon", "Basilej"], 2, "Wimbledon je jeden ze ƒçty≈ô Grand Slam≈Ø.", "Sport", "Lehk√°"),
    # V≈°eobecn√©
    QA("Kolik minut m√° jedna hodina?", ["50", "60", "90", "100"], 1, "1 hodina = 60 minut.", "V≈°eobecn√©", "Lehk√°"),
    QA("Jak√° veliƒçina se v elektrotechnice znaƒç√≠ U?", ["Proud", "Odpor", "Napƒõt√≠", "V√Ωkon"], 2, "U je napƒõt√≠ (V).", "V≈°eobecn√©", "St≈ôedn√≠"),
]

TOPICS = ["P≈ô√≠roda", "Historie", "Zemƒõpis", "Kultura", "Sport", "V≈°eobecn√©"]
DIFFS = ["Lehk√°", "St≈ôedn√≠", "Tƒõ≈æk√°"]

# =============== Pomocn√© funkce ===============
def shuffle_question(qa: QA) -> QA:
    idxs = list(range(4))
    random.shuffle(idxs)
    options = [qa.options[i] for i in idxs]
    new_correct = idxs.index(qa.correct_index)
    return QA(qa.question, options, new_correct, qa.explanation, qa.category, qa.difficulty)


def synthesize_questions_local(topic: str, difficulty: str, n: int) -> List[QA]:
    """Jednoduch√© lok√°ln√≠ sestaven√≠ ot√°zek bez AI, aby to fungovalo hned."""
    pool = [q for q in BUILTIN_BANK if q.category == topic and q.difficulty == difficulty]
    if len(pool) < n:
        pool += [q for q in BUILTIN_BANK if q.category == topic and q.difficulty != difficulty]
    while len(pool) < n:
        base_q = QA(
            question=f"[{difficulty}] ({topic}) Dopl≈àuj√≠c√≠ ot√°zka: Kter√° z mo≈ænost√≠ je spr√°vn√°?",
            options=["Spr√°vn√°", "Mo≈ænost 2", "Mo≈ænost 3", "Mo≈ænost 4"],
            correct_index=0,
            explanation="Uk√°zkov√° ot√°zka vytvo≈ôen√° gener√°torem ≈°ablon.",
            category=topic,
            difficulty=difficulty,
        )
        pool.append(base_q)
    random.shuffle(pool)
    return [shuffle_question(q) for q in pool[:n]]


def synthesize_questions_ai(topic: str, difficulty: str, n: int, model_pref: str = "openai:gpt-4o-mini") -> List[QA]:
    """Volitelnƒõ pou≈æije OpenAI (nebo Ollama), pokud je k dispozici. P≈ôi chybƒõ spadne zpƒõt na lok√°ln√≠ re≈æim."""
    out: List[QA] = []
    try:
        if model_pref.startswith("openai:"):
            import openai  # type: ignore
            client = openai.OpenAI()
            sys_prompt = (
                "Jsi gener√°tor kv√≠zov√Ωch ot√°zek v ƒçe≈°tinƒõ. Vra≈• POUZE validn√≠ JSON pole objekt≈Ø: "
                "{question, options[4], correct_index(0-3), explanation, category, difficulty}. "
                "Dodr≈æ ƒçesk√Ω jazyk a po≈æadovanou obt√≠≈ænost."
            )
            user_prompt = (
                f"t√©ma: {topic}
obt√≠≈ænost: {difficulty}
poƒçet: {n}
"
                "Po≈æadavky: ≈æ√°dn√© opakuj√≠c√≠ se ot√°zky, ≈æ√°dn√© odpovƒõdi typu 'v≈°echny v√Ω≈°e uveden√©'."
            )
            resp = client.chat.completions.create(
                model=model_pref.split(":", 1)[1],
                messages=[
                    {"role": "system", "content": sys_prompt},
                    {"role": "user", "content": user_prompt},
                ],
                temperature=0.7,
            )
            txt = resp.choices[0].message.content or "[]"
            items = json.loads(txt)
            for it in items:
                out.append(QA(
                    question=it['question'],
                    options=it['options'],
                    correct_index=int(it['correct_index']),
                    explanation=it.get('explanation', ''),
                    category=topic,
                    difficulty=difficulty,
                ))
        elif model_pref.startswith("ollama:"):
            import requests  # type: ignore
            model = model_pref.split(":", 1)[1]
            prompt = (
                "Jsi gener√°tor kv√≠zov√Ωch ot√°zek v ƒçe≈°tinƒõ. Vra≈• POUZE validn√≠ JSON pole objekt≈Ø se sch√©matem "
                "{question, options[4], correct_index(0-3), explanation}. "
                f"T√©ma: {topic}; Obt√≠≈ænost: {difficulty}; Poƒçet: {n}."
            )
            r = requests.post(
                "http://localhost:11434/api/generate",
                json={"model": model, "prompt": prompt, "stream": False},
                timeout=120,
            )
            payload = r.json()
            items = json.loads(payload.get("response", "[]"))
            for it in items:
                out.append(QA(
                    question=it['question'],
                    options=it['options'],
                    correct_index=int(it['correct_index']),
                    explanation=it.get('explanation', ''),
                    category=topic,
                    difficulty=difficulty,
                ))
        else:
            raise RuntimeError("Nepodporovan√Ω model_pref")
    except Exception as e:
        st.info(f"AI re≈æim selhal ({e}). P≈ôep√≠n√°m na lok√°ln√≠ generov√°n√≠.")
        out = []

    if not out:
        out = synthesize_questions_local(topic, difficulty, n)
    return [shuffle_question(q) for q in out[:n]]

# =============== UI ===============
st.set_page_config(page_title="Vƒõdomostn√≠ kv√≠z", page_icon="‚ùì", layout="centered")
st.title("üß† Vƒõdomostn√≠ kv√≠z")

with st.sidebar:
    st.header("Nastaven√≠")
    topic = st.selectbox("T√©ma", TOPICS, index=5)
    diff = st.selectbox("Obt√≠≈ænost", DIFFS, index=0)
    n_questions = st.number_input("Poƒçet ot√°zek", min_value=10, max_value=100, value=10, step=1)
    time_limit = st.number_input("Limit na ot√°zku (s)", min_value=5, max_value=30, value=20, step=1)

    st.divider()
    st.subheader("Generov√°n√≠ ot√°zek")
    gen_mode = st.radio("Re≈æim", ["Lok√°ln√≠", "AI"], horizontal=True)
    model_pref = st.text_input("Model (AI)", value="openai:gpt-4o-mini", help="openai:gpt-4o-mini nebo ollama:llama3")
    st.caption("AI re≈æim vy≈æaduje kl√≠ƒç (OpenAI) nebo bƒõ≈æ√≠c√≠ Ollama server.")

    start = st.button("‚ñ∂Ô∏è Spustit kv√≠z", use_container_width=True)

# =============== Session state ===============
ss = st.session_state
ss.setdefault("questions", [])
ss.setdefault("q_index", 0)
ss.setdefault("score", 0)
ss.setdefault("answers", [])
ss.setdefault("deadline", None)
ss.setdefault("running", False)

# =============== Start ===============
if start:
    if gen_mode == "AI":
        ss["questions"] = synthesize_questions_ai(topic, diff, int(n_questions), model_pref=model_pref)
    else:
        ss["questions"] = synthesize_questions_local(topic, diff, int(n_questions))
    ss["q_index"] = 0
    ss["score"] = 0
    ss["answers"] = []
    ss["running"] = True
    ss["deadline"] = time.time() + int(time_limit)
    if hasattr(st, "experimental_rerun"):
        st.experimental_rerun()

# =============== Hlavn√≠ logika kv√≠zu ===============
if ss["running"] and ss["questions"]:
    q: QA = ss["questions"][ss["q_index"]]

    # Odpoƒçet ‚Äì bezpeƒçnƒõ, proto≈æe autorefresh nemus√≠ b√Ωt v ka≈æd√© verzi
    remaining = max(0, int(ss["deadline"] - time.time())) if ss["deadline"] else 0
    try:
        st.progress((remaining / time_limit) if time_limit else 0.0)
    except Exception:
        pass
    st.write(f"‚è≥ Zb√Ωv√°: **{remaining} s** / limit {int(time_limit)} s")

    st.subheader(f"Ot√°zka {ss['q_index'] + 1} / {len(ss['questions'])}")
    st.markdown(f"**{q.question}**")

    labels = [f"A) {q.options[0]}", f"B) {q.options[1]}", f"C) {q.options[2]}", f"D) {q.options[3]}"]
    choice = st.radio(
        "Vyber odpovƒõƒè:",
        options=list(range(4)),
        format_func=lambda i: labels[i],
        index=None,
        key=f"choice_{ss['q_index']}"
    )

    col1, col2 = st.columns(2)
    with col1:
        submit = st.button("Potvrdit odpovƒõƒè", use_container_width=True)
    with col2:
        skip = st.button("P≈ôeskoƒçit", use_container_width=True)

    # Autorefresh pro odpoƒçet (pokud je k dispozici)
    if hasattr(st, "autorefresh"):
        st.autorefresh(interval=1000, key="timer")

    # Vynucen√© odesl√°n√≠ po vypr≈°en√≠
    force_submit = remaining <= 0

    if submit or skip or force_submit:
        is_correct = (choice is not None) and (int(choice) == q.correct_index)
        ss["score"] += 1 if is_correct else 0
        ss["answers"].append({
            "question": q.question,
            "chosen": None if choice is None else q.options[int(choice)],
            "correct": q.options[q.correct_index],
            "correct_bool": bool(is_correct),
            "explanation": q.explanation,
            "category": q.category,
            "difficulty": q.difficulty,
            "time_limit_s": int(time_limit),
            "time_left_s": remaining,
        })
        # Dal≈°√≠ ot√°zka
        ss["q_index"] += 1
        if ss["q_index"] >= len(ss["questions"]):
            ss["running"] = False
        else:
            ss["deadline"] = time.time() + int(time_limit)
        if hasattr(st, "experimental_rerun"):
            st.experimental_rerun()

# =============== V√Ωsledky ===============
if (not ss["running"]) and ss["questions"]:
    st.success("Hotovo! Tady jsou v√Ωsledky.")
    correct_count = sum(1 for a in ss["answers"] if a["correct_bool"]) if ss["answers"] else 0
    st.metric("Spr√°vnƒõ", f"{correct_count} / {len(ss['questions'])}")
    st.metric("Sk√≥re", f"{ss['score']}")

    df = pd.DataFrame(ss["answers"])
    df_show = df[[
        "question", "chosen", "correct", "correct_bool", "explanation", "category", "difficulty", "time_left_s"
    ]]
    df_show = df_show.rename(columns={
        "question": "Ot√°zka",
        "chosen": "Tvoje odpovƒõƒè",
        "correct": "Spr√°vn√° odpovƒõƒè",
        "correct_bool": "Spr√°vnƒõ?",
        "explanation": "Vysvƒõtlen√≠",
        "category": "T√©ma",
        "difficulty": "Obt√≠≈ænost",
        "time_left_s": "Zb√Ωvaj√≠c√≠ ƒças (s)",
    })
    st.dataframe(df_show, use_container_width=True, hide_index=True)

    csv = df_show.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è St√°hnout v√Ωsledky (CSV)", csv, file_name="kviz_vysledky.csv", mime="text/csv")

    st.divider()
    if st.button("üîÅ Hr√°t znovu se stejn√Ωmi nastaven√≠mi", use_container_width=True):
        ss.update({"running": True, "q_index": 0, "score": 0, "answers": [], "deadline": time.time() + int(time_limit)})
        if hasattr(st, "experimental_rerun"):
            st.experimental_rerun()

    if st.button("üè† Zpƒõt na start (vybrat nov√© nastaven√≠)", use_container_width=True):
        ss.update({"questions": [], "running": False, "q_index": 0, "score": 0, "answers": [], "deadline": None})
        if hasattr(st, "experimental_rerun"):
            st.experimental_rerun()

# =============== Import vlastn√≠ banky ===============
with st.expander("üì• Import vlastn√≠ banky ot√°zek (JSON)"):
    st.caption("Form√°t: pole objekt≈Ø {question, options[4], correct_index, explanation, category, difficulty}.")
    up = st.file_uploader("Nahraj JSON soubor", type=["json"], accept_multiple_files=False)
    if up is not None:
        try:
            data = json.load(up)
            items = data if isinstance(data, list) else data.get("items", [])
            loaded: List[QA] = []
            for it in items:
                loaded.append(QA(
                    question=it['question'],
                    options=it['options'],
                    correct_index=int(it['correct_index']),
                    explanation=it.get('explanation', ''),
                    category=it.get('category', TOPICS[0]),
                    difficulty=it.get('difficulty', DIFFS[0]),
                ))
            BUILTIN_BANK.clear()
            BUILTIN_BANK.extend(loaded)
            st.success(f"Naƒçteno {len(loaded)} ot√°zek. Lok√°ln√≠ re≈æim teƒè bude ƒçerpat z tv√©ho souboru.")
        except Exception as e:
            st.error(f"Nepoda≈ôilo se naƒç√≠st JSON: {e}")

with st.expander("‚ÑπÔ∏è Tipy"):
    st.markdown(
        "- **Shuffle** odpovƒõd√≠ je zapnut√Ω pro ka≈ædou ot√°zku.
"
        "- **ƒåasovaƒç** automaticky vyhodnot√≠ ot√°zku po vypr≈°en√≠ limitu.
"
        "- **AI re≈æim**: pokud sel≈æe, aplikace plynule p≈ôepne na lok√°ln√≠ generov√°n√≠.
"
        "- M≈Ø≈æe≈° nahr√°t **vlastn√≠ JSON banku** a pou≈æ√≠vat Lok√°ln√≠ re≈æim bez AI."
    )
